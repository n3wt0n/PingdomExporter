name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.x'
  PROJECT_PATH: './PingdomExporter'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for semantic release

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build application
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Run tests (if any)
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal
      continue-on-error: true  # Continue if no tests exist

    - name: Create sample configuration
      run: |
        cd ${{ env.PROJECT_PATH }}
        cp appsettings.sample.json appsettings.json

    - name: Test application help
      run: |
        cd ${{ env.PROJECT_PATH }}
        dotnet run --configuration Release -- --help || echo "Help command not implemented yet"
      continue-on-error: true

  cross-platform-test:
    name: Cross-Platform Test
    needs: build
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build application
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Test build output (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd ${{ env.PROJECT_PATH }}
        if (Test-Path "bin/Release/net*/PingdomExporter.dll") {
          Write-Host "✅ Build successful on Windows"
        } else {
          Write-Host "❌ Build failed on Windows"
          exit 1
        }
      shell: pwsh

    - name: Test build output (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd ${{ env.PROJECT_PATH }}
        if [ -f "bin/Release/net"*/PingdomExporter.dll ]; then
          echo "✅ Build successful on ${{ matrix.os }}"
        else
          echo "❌ Build failed on ${{ matrix.os }}"
          exit 1
        fi
      shell: bash

  build-packages:
    name: Build Platform Packages
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        include:
          - runtime: win-x64
            extension: zip
            scripts: "run.bat run.ps1"
          - runtime: linux-x64
            extension: tar.gz
            scripts: "run.sh"
          - runtime: osx-x64
            extension: tar.gz
            scripts: "run.sh"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build platform package for ${{ matrix.runtime }}
      run: |
        cd ${{ env.PROJECT_PATH }}
        
        # Create platform-specific build
        dotnet publish --configuration Release --runtime ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true --output ../temp-build/${{ matrix.runtime }}
        
        # Copy additional files
        cp ../README.md appsettings.sample.json ../temp-build/${{ matrix.runtime }}/
        
        # Copy platform-specific scripts
        for script in ${{ matrix.scripts }}; do
          if [ -f "$script" ]; then
            cp "$script" ../temp-build/${{ matrix.runtime }}/
          fi
        done
        
        # Set execute permissions for Unix platforms
        if [[ "${{ matrix.runtime }}" != "win-x64" ]]; then
          chmod +x ../temp-build/${{ matrix.runtime }}/run.sh 2>/dev/null || echo "run.sh not found or already executable"
          chmod +x ../temp-build/${{ matrix.runtime }}/PingdomExporter 2>/dev/null || echo "PingdomExporter not found or already executable"
        fi

    - name: Create archive for ${{ matrix.runtime }}
      run: |
        cd temp-build
        if [[ "${{ matrix.extension }}" == "zip" ]]; then
          zip -r pingdom-exporter-${{ matrix.runtime }}.zip ${{ matrix.runtime }}/
        else
          tar -czf pingdom-exporter-${{ matrix.runtime }}.tar.gz ${{ matrix.runtime }}/
        fi

    - name: Upload platform artifact
      uses: actions/upload-artifact@v4
      with:
        name: platform-${{ matrix.runtime }}
        path: temp-build/pingdom-exporter-${{ matrix.runtime }}.${{ matrix.extension }}
        retention-days: 1

  release:
    name: Release
    needs: [build, build-packages]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js for semantic-release
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release
      run: |
        npm install -g semantic-release@22.0.12
        npm install -g @semantic-release/changelog@6.0.3
        npm install -g @semantic-release/git@10.0.1
        npm install -g @semantic-release/github@9.2.6

    - name: Download all platform artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: platform-*
        path: ./artifacts
        merge-multiple: false

    - name: Organize platform packages
      run: |
        # Create platform-releases directory
        mkdir -p platform-releases
        
        # Move artifacts to expected locations
        mv artifacts/platform-win-x64/pingdom-exporter-win-x64.zip platform-releases/
        mv artifacts/platform-linux-x64/pingdom-exporter-linux-x64.tar.gz platform-releases/
        mv artifacts/platform-osx-x64/pingdom-exporter-osx-x64.tar.gz platform-releases/

    - name: Verify platform packages
      run: |
        echo "=== Checking platform-releases directory ==="
        ls -la platform-releases/ || echo "platform-releases directory not found"
        echo "=== Current working directory ==="
        pwd
        echo "=== Files in current directory ==="
        ls -la
        echo "=== Checking if zip files exist ==="
        [ -f "platform-releases/pingdom-exporter-win-x64.zip" ] && echo "✅ Windows zip exists" || echo "❌ Windows zip missing"
        [ -f "platform-releases/pingdom-exporter-linux-x64.tar.gz" ] && echo "✅ Linux tar.gz exists" || echo "❌ Linux tar.gz missing"
        [ -f "platform-releases/pingdom-exporter-osx-x64.tar.gz" ] && echo "✅ macOS tar.gz exists" || echo "❌ macOS tar.gz missing"

    - name: Run semantic release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Ensure we're in the root directory
        cd $GITHUB_WORKSPACE
        
        # Initialize version to 0.1.0 if this is the first release
        if ! git tag -l | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+' > /dev/null; then
          echo "No previous releases found. Initializing version to 0.1.0"
          git tag v0.0.0
          git push origin v0.0.0 || echo "Tag already exists"
        fi
        
        # Run semantic release
        semantic-release
